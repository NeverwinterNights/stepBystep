{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","value","setValue","error","setError","style","display","alignItems","TextField","size","helperText","variant","label","onChange","e","currentTarget","onKeyPress","charCode","addItem","IconButton","onClick","trim","color","AddCircle","EditableSpan","editMode","setEditMode","title","setTitle","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Todolist","changeToDoTitle","id","removeToDoList","Delete","addTask","tasks","map","t","key","className","isDone","Checkbox","changeStatus","checked","changeTaskTitle","removeTask","Button","filter","changeFilter","App","ToDoListID_1","v1","ToDoListID_2","ToDoList","setToDoList","setTasks","ToDoListID","newTask","taskId","getTaskForRender","changeToDoFilter","componentsToDoList","Grid","item","Paper","padding","elevation","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","marginTop","newToDoList","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.57318948.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddCircle} from \"@material-ui/icons\";\r\n\r\n\r\ntype  AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n\r\n    const [value, setValue] = useState (\"\");\r\n    const [error, setError] = useState (\"\");\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue (e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError (\"\")\r\n        if (e.charCode === 13) {\r\n            props.addItem (value)\r\n            setValue (\"\")\r\n        }\r\n    }\r\n    const addItem = () => {\r\n        if (value.trim () === \"\") {\r\n            setError (\"Title is required\")\r\n            return\r\n        }\r\n        props.addItem (value.trim ())\r\n        setValue (\"\")\r\n    }\r\n    const errorMessage = \"Title is required\"\r\n\r\n    return (\r\n        <div>\r\n            <div style={{display: \"flex\", alignItems: \"center\"}}>\r\n                <TextField size={\"small\"} helperText={error && errorMessage} variant={\"outlined\"} label={\"Type value\"}\r\n                           value={value} onChange={onChangeHandler}\r\n                           onKeyPress={onKeyPressHandler}\r\n                           error={!!error}/>\r\n                <IconButton onClick={addItem} color={\"primary\"}><AddCircle/></IconButton>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype  EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n\r\n}\r\n\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean> (false);\r\n    const [title, setTitle] = useState<string> (props.title);\r\n\r\n    const onEditMode = () => {\r\n        setEditMode (true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode (false)\r\n        props.changeTitle (title)\r\n    }\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle (e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            offEditMode ()\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        editMode ? <TextField onKeyPress={onKeyPressHandler} onChange={onChangeHandler} value={title} autoFocus={true}\r\n                          onBlur={offEditMode}/> : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {filteredType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, ToDoListID: string) => void\r\n    changeFilter: (value: filteredType, ToDoListID: string) => void\r\n    addTask: (title: string, ToDoListID: string) => void\r\n    changeStatus: (taskId: string, isDone: boolean, ToDoListID: string) => void\r\n    filter: filteredType\r\n    removeToDoList: (ToDoListID: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, ToDoListID: string) => void\r\n    changeToDoTitle: (title: string, ToDoListID: string) => void\r\n\r\n}\r\n\r\nexport function Todolist (props: TodolistPropsType) {\r\n\r\n\r\n    const onAllFilter = () => props.changeFilter (\"all\", props.id)\r\n    const onActiveFilter = () => props.changeFilter (\"active\", props.id)\r\n    const onCompletedFilter = () => props.changeFilter (\"completed\", props.id)\r\n    const removeToDo = () => {\r\n        props.removeToDoList (props.id)\r\n    }\r\n    const addTask = (title: string) => {\r\n        props.addTask (title, props.id)\r\n    }\r\n    const changeToDoListTitle = (title: string) => {\r\n        props.changeToDoTitle (title, props.id)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} changeTitle={changeToDoListTitle}/>\r\n\r\n\r\n            <IconButton onClick={removeToDo}><Delete/></IconButton>\r\n        </h3>\r\n\r\n\r\n        <AddItemForm addItem={addTask}/>\r\n\r\n\r\n        <ul>\r\n\r\n            {props.tasks.map ((t) => {\r\n                const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                    props.changeStatus (t.id, e.currentTarget.checked, props.id)\r\n                }\r\n                const onRemoveHandler = () => {\r\n                    props.removeTask (t.id, props.id)\r\n                }\r\n                const changeTaskTitle = (title: string) => {\r\n                    props.changeTaskTitle (t.id, title, props.id)\r\n                }\r\n                return <li key={t.id} className={t.isDone ? \"is-done \" : \"\"}>\r\n                    <Checkbox color={\"primary\"}\r\n                           onChange={onChangeInputHandler}\r\n                           checked={t.isDone}/>\r\n                    <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n\r\n                    <IconButton size={\"small\"} onClick={onRemoveHandler}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </li>\r\n            })\r\n            }\r\n\r\n\r\n        </ul>\r\n        <div>\r\n            <Button size={\"small\"} variant={\"contained\"}\r\n                    color={props.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    onClick={onAllFilter}>All</Button>\r\n            <Button size={\"small\"} variant={\"contained\"}\r\n                    color={props.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    onClick={onActiveFilter}>Active\r\n            </Button>\r\n            <Button size={\"small\"} variant={\"contained\"}\r\n                    color={props.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    onClick={onCompletedFilter}>Completed </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport AppBar from '@material-ui/core/AppBar/AppBar';\r\nimport {IconButton, Toolbar, Typography, Button, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport  type  filteredType = \"all\" | \"active\" | \"completed\"\r\n\r\n\r\nfunction App () {\r\n\r\n\r\n    type  ToDoListType = {\r\n        id: string\r\n        title: string\r\n        filter: filteredType\r\n    }\r\n\r\n\r\n    type  TaskStateType = {\r\n        [key: string]: Array<TaskType>\r\n    }\r\n\r\n    const ToDoListID_1 = v1 ()\r\n    const ToDoListID_2 = v1 ()\r\n\r\n    const [ToDoList, setToDoList] = useState<Array<ToDoListType>> ([\r\n        {id: ToDoListID_1, title: \"What to learn\", filter: \"all\"},\r\n        {id: ToDoListID_2, title: \"What to buy\", filter: \"all\"}\r\n    ]);\r\n\r\n    // const [filter, setFilter] = useState<filteredType> (\"all\");\r\n\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType> ({\r\n        [ToDoListID_1]: [\r\n            {id: v1 (), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1 (), title: \"JS\", isDone: true},\r\n            {id: v1 (), title: \"ReactJS\", isDone: false}],\r\n        [ToDoListID_2]: [\r\n            {id: v1 (), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1 (), title: \"JS\", isDone: true},\r\n            {id: v1 (), title: \"ReactJS\", isDone: false}]\r\n\r\n\r\n    })\r\n\r\n\r\n    const removeTask = (id: string, ToDoListID: string) => {\r\n\r\n        tasks[ToDoListID] = tasks[ToDoListID].filter ((t) => t.id !== id)\r\n        setTasks ({...tasks})\r\n    }\r\n\r\n    const addTask = (title: string, ToDoListID: string) => {\r\n        let newTask = {id: v1 (), title: title, isDone: false}\r\n        tasks[ToDoListID] = [newTask, ...tasks[ToDoListID]]\r\n        setTasks ({...tasks})\r\n    }\r\n\r\n    const addToDoList = (title: string) => {\r\n        const ToDoListID = v1 ()\r\n        const newToDoList: ToDoListType = {\r\n            id: ToDoListID, title: title, filter: \"all\",\r\n        }\r\n        setToDoList ([...ToDoList, newToDoList])\r\n        setTasks ({...tasks, [ToDoListID]: []})\r\n    }\r\n\r\n    const changeStatus = (taskId: string, isDone: boolean, ToDoListID: string) => {\r\n\r\n        tasks[ToDoListID] = tasks[ToDoListID].map ((t) => t.id === taskId ? {...t, isDone} : t)\r\n\r\n\r\n        setTasks ({...tasks})\r\n    }\r\n    const removeToDoList = (ToDoListID: string) => {\r\n        setToDoList (ToDoList.filter ((t) => t.id !== ToDoListID))\r\n        delete tasks[ToDoListID]\r\n    }\r\n\r\n\r\n    const getTaskForRender = (ToDoList: ToDoListType): Array<TaskType> => {\r\n        if (ToDoList.filter === \"completed\") {\r\n            return tasks[ToDoList.id].filter ((t) => t.isDone)\r\n        } else if (ToDoList.filter === \"active\") {\r\n            return tasks[ToDoList.id].filter ((t) => !t.isDone)\r\n\r\n        } else {\r\n            return tasks[ToDoList.id]\r\n        }\r\n    }\r\n\r\n    const changeToDoFilter = (filter: filteredType, ToDoListID: string) => {\r\n        setToDoList (ToDoList.map ((t) => t.id === ToDoListID ? {...t, filter} : t))\r\n\r\n    }\r\n\r\n    const changeToDoTitle = (title: string, ToDoListID: string) => {\r\n        setToDoList (ToDoList.map ((t) => t.id === ToDoListID ? {...t, title} : t))\r\n\r\n    }\r\n\r\n    const changeTaskTitle = (taskId: string, title: string, ToDoListID: string) => {\r\n\r\n        tasks[ToDoListID] = tasks[ToDoListID].map ((t) => t.id === taskId ? {...t, title} : t)\r\n\r\n\r\n        setTasks ({...tasks})\r\n    }\r\n\r\n\r\n    const componentsToDoList = ToDoList.map ((t) => {\r\n        return (\r\n            <Grid item>\r\n                <Paper style={{padding: \"20px\"}} elevation={5}>\r\n                    <Todolist\r\n                        key={t.id}\r\n                        id={t.id}\r\n                        title={t.title}\r\n                        tasks={getTaskForRender (t)}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeToDoFilter}\r\n                        addTask={addTask}\r\n                        changeStatus={changeStatus}\r\n                        filter={t.filter}\r\n                        removeToDoList={removeToDoList}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeToDoTitle={changeToDoTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{marginTop: \"20px\"}} >\r\n                    <AddItemForm addItem={addToDoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5} style={{marginTop: \"20px\"}}>\r\n                    {componentsToDoList}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}