{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","value","setValue","error","setError","onChange","e","currentTarget","onKeyPress","charCode","addItem","className","onClick","trim","EditableSpan","editMode","setEditMode","title","setTitle","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Todolist","changeToDoTitle","id","removeToDoList","addTask","tasks","map","t","key","isDone","type","changeStatus","checked","changeTaskTitle","removeTask","filter","changeFilter","App","ToDoListID_1","v1","ToDoListID_2","ToDoList","setToDoList","setTasks","ToDoListID","newTask","taskId","getTaskForRender","changeToDoFilter","componentsToDoList","newToDoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.abaa1c7d.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\n\r\ntype  AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nexport const AddItemForm = (props:AddItemFormPropsType) => {\r\n\r\n    const [value, setValue] = useState (\"\");\r\n    const [error, setError] = useState (\"\");\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue (e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError (\"\")\r\n        if (e.charCode === 13) {\r\n            props.addItem (value)\r\n            setValue (\"\")\r\n        }\r\n    }\r\n    const addItem = () => {\r\n        if (value.trim () === \"\") {\r\n            setError (\"Title is required\")\r\n            return\r\n        }\r\n        props.addItem (value.trim ())\r\n        setValue (\"\")\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <input value={value} onChange={onChangeHandler} onKeyPress={onKeyPressHandler}\r\n                       className={error ? \"error\" : \"\"}/>\r\n                <button onClick={addItem}>+</button>\r\n                {error && <div className={\"error-message\"}>{error}</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype  EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: ( title: string)=> void\r\n\r\n}\r\n\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean> (false);\r\n    const [title, setTitle] = useState<string> (props.title);\r\n\r\n    const onEditMode = () => { setEditMode (true) }\r\n    const offEditMode = () => {\r\n        setEditMode (false)\r\n        props.changeTitle(title) }\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle (e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n             if (e.charCode === 13) {\r\n                 offEditMode()\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        editMode ? <input onKeyPress={onKeyPressHandler} onChange={onChangeHandler} value={title} autoFocus={true} onBlur={offEditMode}/> : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {filteredType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, ToDoListID: string) => void\r\n    changeFilter: (value: filteredType, ToDoListID: string) => void\r\n    addTask: (title: string, ToDoListID: string) => void\r\n    changeStatus: (taskId: string, isDone: boolean, ToDoListID: string) => void\r\n    filter: filteredType\r\n    removeToDoList: (ToDoListID: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, ToDoListID: string) => void\r\n    changeToDoTitle: (title: string, ToDoListID: string) => void\r\n\r\n}\r\n\r\nexport function Todolist (props: TodolistPropsType) {\r\n\r\n\r\n    const onAllFilter = () => props.changeFilter (\"all\", props.id)\r\n    const onActiveFilter = () => props.changeFilter (\"active\", props.id)\r\n    const onCompletedFilter = () => props.changeFilter (\"completed\", props.id)\r\n    const removeToDo = () => {\r\n        props.removeToDoList (props.id)\r\n    }\r\n    const addTask = (title: string) => {\r\n        props.addTask (title, props.id)\r\n    }\r\n    const changeToDoListTitle = (title: string) => {props.changeToDoTitle(title, props.id)}\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} changeTitle={changeToDoListTitle}/>\r\n\r\n\r\n            <button onClick={removeToDo}>X</button>\r\n        </h3>\r\n\r\n\r\n        <AddItemForm addItem={addTask }/>\r\n\r\n\r\n        <ul>\r\n\r\n            {props.tasks.map ((t) => {\r\n                const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                    props.changeStatus (t.id, e.currentTarget.checked, props.id)\r\n                }\r\n                const onRemoveHandler = () => {\r\n                    props.removeTask (t.id, props.id)\r\n                }\r\n                const changeTaskTitle = (title: string) => {props.changeTaskTitle(t.id,title, props.id)}\r\n                return <li key={t.id} className={t.isDone ? \"is-done \" : \"\"}>\r\n                    <input type=\"checkbox\"\r\n                           onChange={onChangeInputHandler}\r\n                           checked={t.isDone}/>\r\n                    <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                    <button onClick={onRemoveHandler}>X\r\n                    </button>\r\n                </li>\r\n            })\r\n            }\r\n\r\n\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === \"all\" ? \"active-filter\" : \"\"} onClick={onAllFilter}>All</button>\r\n            <button className={props.filter === \"active\" ? \"active-filter\" : \"\"} onClick={onActiveFilter}>Active\r\n            </button>\r\n            <button className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedFilter}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport  type  filteredType = \"all\" | \"active\" | \"completed\"\r\n\r\n\r\nfunction App () {\r\n\r\n\r\n    type  ToDoListType = {\r\n        id: string\r\n        title: string\r\n        filter: filteredType\r\n    }\r\n\r\n\r\n    type  TaskStateType = {\r\n        [key: string]: Array<TaskType>\r\n    }\r\n\r\n    const ToDoListID_1 = v1 ()\r\n    const ToDoListID_2 = v1 ()\r\n\r\n    const [ToDoList, setToDoList] = useState<Array<ToDoListType>> ([\r\n        {id: ToDoListID_1, title: \"What to learn\", filter: \"all\"},\r\n        {id: ToDoListID_2, title: \"What to bye\", filter: \"all\"}\r\n    ]);\r\n\r\n    // const [filter, setFilter] = useState<filteredType> (\"all\");\r\n\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType> ({\r\n        [ToDoListID_1]: [\r\n            {id: v1 (), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1 (), title: \"JS\", isDone: true},\r\n            {id: v1 (), title: \"ReactJS\", isDone: false}],\r\n        [ToDoListID_2]: [\r\n            {id: v1 (), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1 (), title: \"JS\", isDone: true},\r\n            {id: v1 (), title: \"ReactJS\", isDone: false}]\r\n\r\n\r\n    })\r\n\r\n\r\n    const removeTask = (id: string, ToDoListID: string) => {\r\n\r\n        tasks[ToDoListID] = tasks[ToDoListID].filter ((t) => t.id !== id)\r\n        setTasks ({...tasks})\r\n    }\r\n\r\n    const addTask = (title: string, ToDoListID: string) => {\r\n        let newTask = {id: v1 (), title: title, isDone: false}\r\n        tasks[ToDoListID] = [newTask, ...tasks[ToDoListID]]\r\n        setTasks ({...tasks})\r\n    }\r\n\r\n    const addToDoList = (title: string) => {\r\n        const ToDoListID = v1 ()\r\n        const newToDoList: ToDoListType = {\r\n            id: ToDoListID, title: title, filter: \"all\",\r\n        }\r\n        setToDoList([...ToDoList, newToDoList])\r\n        setTasks({...tasks, [ToDoListID]: []})\r\n    }\r\n\r\n    const changeStatus = (taskId: string, isDone: boolean, ToDoListID: string) => {\r\n\r\n        tasks[ToDoListID] = tasks[ToDoListID].map ((t) => t.id === taskId ? {...t, isDone} : t)\r\n\r\n\r\n        setTasks ({...tasks})\r\n    }\r\n    const removeToDoList = (ToDoListID: string) => {\r\n        setToDoList (ToDoList.filter ((t) => t.id !== ToDoListID))\r\n        delete tasks[ToDoListID]\r\n    }\r\n\r\n\r\n    const getTaskForRender = (ToDoList: ToDoListType): Array<TaskType> => {\r\n        if (ToDoList.filter === \"completed\") {\r\n            return tasks[ToDoList.id].filter ((t) => t.isDone)\r\n        } else if (ToDoList.filter === \"active\") {\r\n            return tasks[ToDoList.id].filter ((t) => !t.isDone)\r\n\r\n        } else {\r\n            return tasks[ToDoList.id]\r\n        }\r\n    }\r\n\r\n    const changeToDoFilter = (filter: filteredType, ToDoListID: string) => {\r\n        setToDoList (ToDoList.map ((t) => t.id === ToDoListID ? {...t, filter} : t))\r\n\r\n    }\r\n\r\n    const changeToDoTitle = (title: string, ToDoListID: string) => {\r\n        setToDoList (ToDoList.map ((t) => t.id === ToDoListID ? {...t, title} : t))\r\n\r\n    }\r\n\r\n\r\n    const changeTaskTitle = (taskId: string, title: string, ToDoListID: string) => {\r\n\r\n        tasks[ToDoListID] = tasks[ToDoListID].map ((t) => t.id === taskId ? {...t, title} : t)\r\n\r\n\r\n        setTasks ({...tasks})\r\n    }\r\n\r\n\r\n    const componentsToDoList = ToDoList.map ((t) => {\r\n        return (\r\n            <Todolist\r\n                key={t.id}\r\n                id={t.id}\r\n                title={t.title}\r\n                tasks={getTaskForRender (t)}\r\n                removeTask={removeTask}\r\n                changeFilter={changeToDoFilter}\r\n                addTask={addTask}\r\n                changeStatus={changeStatus}\r\n                filter={t.filter}\r\n                removeToDoList={removeToDoList}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeToDoTitle={changeToDoTitle}\r\n            />\r\n        )\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addToDoList}/>\r\n            {componentsToDoList}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}